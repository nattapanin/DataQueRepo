using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data;
using System.Data.SqlClient;
using System.Reflection;
namespace CodeSamplesRepo
{
    internal class HelperUtil
    {
        public void StoredProcWithOutputVal() 
        {
            string connstring = "connection string";
            using (SqlConnection sqlconn = new SqlConnection(connstring))
            {
                var storedprocname = "uspprocName";
                using (SqlCommand sqlcmd = new SqlCommand(storedprocname))
                {
                    sqlcmd.CommandType = CommandType.StoredProcedure;
                    sqlcmd.Connection = sqlconn;
                    sqlcmd.Parameters.AddWithValue("@param1", "paramvalue");
                    sqlcmd.Parameters.AddWithValue("@param2", "paramvalue");
                    sqlcmd.Parameters.Add("@outparam1", SqlDbType.VarChar,50);
                    sqlcmd.Parameters.Add("@outparam2", SqlDbType.DateTime);
                    sqlcmd.Parameters["@outparam1"].Direction = ParameterDirection.Output;
                    sqlcmd.Parameters["@outparam2"].Direction = ParameterDirection.Output;
                    sqlconn.Open();
                    sqlcmd.ExecuteNonQuery();
                    var output1 = sqlcmd.Parameters["@outparam1"].Value.ToString();
                    var output2 = sqlcmd.Parameters["@outparam2"].Value.ToString();
                }

            }
        }

        public void StoredProc()
        {
            string connstring = "connection string";
            using (SqlConnection sqlconn = new SqlConnection(connstring))
            {
                var storedprocname = "uspprocName";
                using (SqlCommand sqlcmd = new SqlCommand(storedprocname))
                {
                    sqlcmd.CommandType = CommandType.StoredProcedure;
                    sqlcmd.Connection = sqlconn;
                    sqlcmd.Parameters.AddWithValue("@param1", "paramvalue");
                    sqlcmd.Parameters.AddWithValue("@param2", "paramvalue");
                    sqlconn.Open();
                    sqlcmd.ExecuteNonQuery();
                }

            }
        }
        public void BulkLoadToSQLTable()
        {
            DataTable dt = new DataTable();
            string connstring = "connection string";
            using (SqlConnection sqlconn = new SqlConnection(connstring))
            {
                sqlconn.Open();       
                using (SqlBulkCopy sqlbc = new SqlBulkCopy(sqlconn))
                {
                    sqlbc.DestinationTableName = "dbo.TableName";
                    SqlBulkCopyColumnMapping col1 = new SqlBulkCopyColumnMapping("sqlcol1","dtcol1");
                    sqlbc.ColumnMappings.Add(col1);
                    SqlBulkCopyColumnMapping col2 = new SqlBulkCopyColumnMapping("sqlcol2", "dtcol2");
                    sqlbc.ColumnMappings.Add(col2);
                    SqlBulkCopyColumnMapping col3 = new SqlBulkCopyColumnMapping("sqlcol3", "dtcol3");
                    sqlbc.ColumnMappings.Add(col3);
                    SqlBulkCopyColumnMapping col4 = new SqlBulkCopyColumnMapping("sqlcol4", "dtcol4");
                    sqlbc.ColumnMappings.Add(col4);
                    sqlbc.WriteToServer(dt);

                }

            }
        }
        public DataTable ConvertToDataTable<T>(List<T> items)
        {
            DataTable dataTable = new DataTable(typeof(T).Name);
            //Get all the properties
            //PropertyInfo[] Props = typeof(T).GetProperties(BindingFlags.Public | BindingFlags.Instance);
            PropertyInfo[] Props = typeof(T).GetProperties();
            foreach (PropertyInfo prop in Props)
            {
                //Setting column names as Property names
                dataTable.Columns.Add(prop.Name);
            }
            foreach (T item in items)
            {
                var values = new object[Props.Length];
                for (int i = 0; i < Props.Length; i++)
                {
                    //inserting property values to datatable rows
                    values[i] = Props[i].GetValue(item, null);
                }
                dataTable.Rows.Add(values);
            }
            //put a breakpoint here and check datatable
            return dataTable;
        }
    }
}
